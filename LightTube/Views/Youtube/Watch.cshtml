@using System.Collections.Specialized
@using System.Globalization
@using System.Text.RegularExpressions
@using System.Web
@using InnerTube.Models
@model LightTube.Contexts.PlayerContext

@{
	bool compatibility = false;
	if (Context.Request.Cookies.TryGetValue("compatibility", out string compatibilityString))
		bool.TryParse(compatibilityString, out compatibility);

	ViewBag.Metadata = new Dictionary<string, string>();
	ViewBag.Metadata["author"] = Model.Video.Channel.Name;
	ViewBag.Metadata["og:title"] = Model.Player.Title;
	ViewBag.Metadata["og:url"] = $"{Url.ActionContext.HttpContext.Request.Scheme}://{Url.ActionContext.HttpContext.Request.Host}{Url.ActionContext.HttpContext.Request.Path}{Url.ActionContext.HttpContext.Request.QueryString}";
	ViewBag.Metadata["og:image"] = $"{Url.ActionContext.HttpContext.Request.Scheme}://{Url.ActionContext.HttpContext.Request.Host}/proxy/image?url={HttpUtility.UrlEncode(Model.Player.Thumbnails.FirstOrDefault()?.Url?.ToString())}";
	ViewBag.Metadata["twitter:card"] = $"{Url.ActionContext.HttpContext.Request.Scheme}://{Url.ActionContext.HttpContext.Request.Host}/proxy/image?url={HttpUtility.UrlEncode(Model.Player.Thumbnails.LastOrDefault()?.Url?.ToString())}";
	ViewBag.Metadata["og:description"] = Model.Player.Description;
	ViewBag.Title = Model.Player.Title;

	Layout = "_Layout";
	try
	{
		ViewBag.Metadata["og:video"] = $"/proxy/video?url={HttpUtility.UrlEncode(Model.Player.Formats.First().Url.ToString())}";
		Model.Resolution ??= Model.Player.Formats.First().FormatNote;
	}
	catch
	{
	}
	ViewData["DisableOldCss"] = true;
	ViewData["HideGuide"] = true;

	bool live = Model.Player.Formats.Length == 0 && Model.Player.AdaptiveFormats.Length > 0;
	string description = Model.Video.GetHtmlDescription();
	const string youtubePattern = @"[w.]*youtube[-nockie]*\.com";

	// turn URLs into hyperlinks
	Regex urlRegex = new(youtubePattern, RegexOptions.IgnoreCase);
	Match m;
	for (m = urlRegex.Match(description); m.Success; m = m.NextMatch())
		description = description.Replace(m.Groups[0].ToString(),
			$"{Url.ActionContext.HttpContext.Request.Host}");
}

<!-- TODO: chapters -->
<div class="watch-page">
	<div class="primary">
		<div class="video-player-container">
			@if (Model.Player.Formats.Length > 0 || live && !compatibility)
			{
				@if (live)
				{
					<video id="player" class="video-js player" poster="@Model.Player.Thumbnails.LastOrDefault()?.Url" controls>
						@foreach (Format format in Model.Player.AdaptiveFormats.Reverse())
						{
							@:<source label='@format.Resolution.Split("x")[1]P' src='/proxy/hls?url=@HttpUtility.UrlEncode(format.Url.ToString())' type="application/x-mpegURL">
						}

						@foreach (Subtitle subtitle in Model.Player.Subtitles ?? Array.Empty<Subtitle>())
						{
							@:<track src="/proxy/subtitle?url=@HttpUtility.UrlEncode(subtitle.Url.ToString())" label="@subtitle.Language" kind="subtitles">
						}
					</video>
				}
				else
				{
					<video id="player" class="video-js player" src="/proxy/video?url=@HttpUtility.UrlEncode(Model.Player.Formats.First(x => x.FormatNote == Model.Resolution).Url.ToString())" poster="@Model.Player.Thumbnails.LastOrDefault()?.Url" controls>
						@foreach (Subtitle subtitle in Model.Player.Subtitles ?? Array.Empty<Subtitle>())
						{
							@:<track src="/proxy/subtitle?url=@HttpUtility.UrlEncode(subtitle.Url.ToString())" label="@subtitle.Language" kind="subtitles">
						}
					</video>
				}
			}
			else if (live && compatibility)
			{
				<div id="player" class="player error" style="background-image: url('@Model.Player.Thumbnails.LastOrDefault()?.Url')">
					<span style="text-align: center">
						Livestreams cannot be played in compatibility mode<br>
						<a style="color: #77F" href="/toggles/compatibility?redirectUrl=@(HttpUtility.UrlEncode($"{Context.Request.Path}{Context.Request.QueryString}"))">Click here</a> to disable compatibility mode
					</span>
				</div>
			}
			else
			{
				<div id="player" class="player error" style="background-image: url('@Model.Player.Thumbnails.LastOrDefault()?.Url')">
					@if (string.IsNullOrWhiteSpace(Model.Player.ErrorMessage))
					{
						<span>
							No playable streams returned from the API (@Model.Player.Formats.Length/@Model.Player.AdaptiveFormats.Length)
						</span>
					}
					else
					{
						<span>
							@Model.Player.ErrorMessage
						</span>
					}
				</div>
			}
		</div>
		<div class="video-info">
			<div class="video-title">@Model.Video.Title</div>
			<div class="video-info-bar">
				<span>@Model.Engagement.Views views</span>
				<span>Published @Model.Video.UploadDate</span>
				<div class="divider"></div>
				<div class="engagement-container">
					<div class="engagement-info">
						<span class="likes">
							<img src="icons/like.svg">@Model.Engagement.Likes
						</span>
						<span class="dislikes">
							<img src="icons/dislike.svg">@Model.Engagement.Dislikes
						</span>
					</div>
					<div class="engagement-bar">
						<div style="width: @(Model.Engagement.GetLikePercentage().ToString().Split(".")[0])%"></div>
					</div>
				</div>
				<a href="https://www.youtube.com/watch?v=@Model.Player.Id">YouTube link</a>
			</div>
			<div class="channel-info">
				<a href="/channel/@Model.Video.Channel.Id" class="avatar">
					<img src="@Model.Video.Channel.Avatars.LastOrDefault()?.Url">
				</a>
				<div class="name">
					<a href="/channel/@Model.Video.Channel.Id">@Model.Video.Channel.Name</a>
				</div>
				<button class="subscribe-button" data-cid="@Model.Video.Channel.Id">Subscribe</button>
			</div>
			<p class="description">@Html.Raw(description)</p>
		</div>
		<hr>
	</div>
	<div class="secondary">
		<noscript>
			<div class="resolutions-list">
				<h3>Change Resolution</h3>
				<div>
					@foreach (Format format in Model.Player.Formats)
					{
						@if (format.FormatNote == Model.Resolution)
						{
							<b>@format.FormatNote (current)</b>
						}
						else
						{
							<a href="/watch?v=@Model.Player.Id&quality=@format.FormatNote">@format.FormatNote</a>
						}
					}
				</div>
			</div>
		</noscript>
		<div class="recommended-list">

			@if (Model.Video.Recommended.Length == 0)
			{
				<p style="text-align: center">None :(<br>This is most likely an age-restricted video</p>
			}
			@foreach (DynamicItem recommendation in Model.Video.Recommended)
			{
				switch (recommendation)
				{
					case VideoItem video:
						<div class="video">
							<a href="/watch?v=@video.Id" class="thumbnail" style="background-image: url('@video.Thumbnails.LastOrDefault()?.Url')">
								<span class="video-length">@video.Duration</span>
							</a>
							<div class="info">
								<a href="/watch?v=@video.Id" class="title max-lines-2">@video.Title</a>
								<div>
									<a href="/channel/@video.Channel.Id" class="max-lines-1">@video.Channel.Name</a>
									<div>
										<span>@video.Views views</span>
										<span>â€¢</span>
										<span>@video.UploadedAt</span>
									</div>
								</div>
							</div>
						</div>
						break;
					case PlaylistItem playlist:
						<div class="playlist">
							<a href="/watch?v=@playlist.FirstVideoId&list=@playlist.Id" class="thumbnail" style="background-image: url('@playlist.Thumbnails.LastOrDefault()?.Url')">
								<div>
									<span>@playlist.VideoCount</span>
									<span>VIDEOS</span>
								</div>
							</a>
							<div class="info">
								<a href="/watch?v=@playlist.FirstVideoId&list=@playlist.Id" class="title max-lines-2">@playlist.Title</a>
								<div>
									<a href="/channel/@playlist.Channel.Id">@playlist.Channel.Name</a>
								</div>
							</div>
						</div>
						break;
					case RadioItem radio:
						<div class="playlist">
							<a href="/watch?v=@radio.FirstVideoId&list=@radio.Id" class="thumbnail" style="background-image: url('@radio.Thumbnails.LastOrDefault()?.Url')">
								<div>
									<span>MIX</span>
								</div>
							</a>
							<div class="info">
								<a href="/watch?v=@radio.FirstVideoId&list=@radio.Id" class="title max-lines-2">@radio.Title</a>
								<div>
									<span>@radio.Channel.Name</span>
								</div>
							</div>
						</div>
						break;
					case ContinuationItem continuationItem:
						break;
					default:
						<div class="video">
							<div class="thumbnail" style="background-image: url('@recommendation.Thumbnails?.LastOrDefault()?.Url')"></div>
							<div class="info">
								<span class="title max-lines-2">@recommendation.GetType().Name</span>
								<div>
									<b>WARNING:</b> Unknown recommendation type: @recommendation.Id
								</div>
							</div>
						</div>
						break;
				}
			}
		</div>
	</div>
</div>

@if (Model.Player.Formats.Length > 0 || live && !compatibility)
{
	@if (!compatibility && !live)
	{
		<script src="~/js/shaka-player/shaka-player.compiled.min.js"></script>
		<script src="~/js/videojs/video.js"></script>
		<script src="~/js/videojs/videojs-shaka.js"></script>
		<script src="~/js/videojs/videojs-hotkeys.js"></script>
		<script>
		var player = videojs('player', {
            techOrder: ['shaka'],
            shaka: {
              debug: false,
              sideload: true,
              configuration: {
                manifest:
                {
					dash:{
						ignoreEmptyAdaptationSet:true
					}
				}
              }   
            },
			controlBar: {
   				children: [
   					'playToggle',
   					'volumePanel',
   					'currentTimeDisplay',
   					'timeDivider',
   					'durationDisplay',
   					'liveDisplay',
   					'seekToLive',
   					'progressControl',
   					'spacer',
   					'chaptersButton',
   					'subsCapsButton',
   					'playbackRateMenuButton',
   					'qualitySelector',
   					'pictureInPictureToggle',
   					'fullscreenToggle',
   				],
   			}
        }).ready(function() {
			this.qualityPickerPlugin();
			this.src([{
				type: 'application/dash+xml',
            	src: '/manifest/@(Model.Video.Id).mpd'
            }]);
			this.hotkeys({
				volumeStep: 0.1,
				seekStep: 5,
				enableModifiersForNumbers: false,
				enableVolumeScroll: false
			});
			this.on("error", () => {if (confirm("Something has gone wrong while trying to play this video. Enable compatibility mode?")) {window.location = "/toggles/compatibility?redirectUrl=" + encodeURIComponent(window.location.href)}})
		});
		</script>
	}
	else
	{
		<script src="~/js/videojs/video.js"></script>
		<script src="~/js/videojs/videojs-quality-selector.js"></script>
		<script src="~/js/videojs/videojs-hotkeys.js"></script>

		<script>
		const player = videojs('player', {
			controlBar: {
				children: [
					'playToggle',
					'volumePanel',
					'currentTimeDisplay',
					'timeDivider',
					'durationDisplay',
					'liveDisplay',
					'seekToLive',
					'progressControl',
					'spacer',
					'chaptersButton',
					'subsCapsButton',
					'playbackRateMenuButton',
					'qualitySelector',
					'pictureInPictureToggle',
					'fullscreenToggle',
				],
			}
		}).ready(function() {
			this.src([
				@if (live)
				{
					foreach (Format format in Model.Player.AdaptiveFormats.Reverse().GroupBy(x => x.FormatNote).Select(g => g.First()))
					{
						@:{src: '/proxy/hls?url=@HttpUtility.UrlEncode(format.Url.ToString())'},
					}
				}
				else
				{
					foreach (Format format in Model.Player.Formats.Reverse().GroupBy(x => x.FormatNote).Select(g => g.First()))
					{
						NameValueCollection query = HttpUtility.ParseQueryString(format.Url.Split("?")[1]);

						@:{src: '/proxy/video?url=@HttpUtility.UrlEncode(format.Url.ToString())',type: '@query.Get("mime")',label: '@format.FormatNote', selected: @(format.FormatNote.StartsWith("720p") ? "true" : "false")},
					}
				}
			]);
			this.hotkeys({
				volumeStep: 0.1,
				seekStep: 5,
				enableModifiersForNumbers: false,
				enableVolumeScroll: false
			});
		  });
	</script>
	}
}